; MIT License
;
; Copyright (c) 2016 Vincent Nys
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

#lang at-exp racket
(require "abstract-multi-domain.rkt")
(require "abstract-domain-ordering.rkt")
(require "abstract-knowledge.rkt")
(require "preprior-graph.rkt")
(require (only-in racket-list-utils/utils findf-index))
(require graph)
(require racket/set)
(require scribble/srcdoc)
(require (for-doc scribble/manual))
(module+ test (require rackunit))

(define (unique-atoms conjunction)
  (reverse
   (foldl
    (λ (at acc)
      (let ([renaming (findf (λ (x) (renames? x at)) acc)])
        (if renaming acc (cons at acc))))
    (list)
    conjunction)))

; TODO add tests

(define (selected-index conjunction prior full-ai-rules)
  (define full-eval-index
    (foldl
     (λ (r acc)
       (if acc
           acc
           (findf-index (λ (atom) (>=-extension (full-evaluation-input-pattern r) atom)) conjunction)))
     #f
     full-ai-rules))
  (if full-eval-index
      full-eval-index
      (let* ([unique (unique-atoms conjunction)]
             [tc (transitive-closure prior)]
             [first
              (findf
               (λ (aa1)
                 (andmap
                  (λ (aa2) (hash-ref tc (list aa1 aa2) #f))
                  unique))
               unique)])
        (begin
          (if (not first)
              #f
              (findf-index first conjunction))))))

; TODO add tests

; contract could be more specific (range is from 0 to length of the list...), but can wait
(provide
 (proc-doc/names
  selected-index
  (-> (listof abstract-atom?) preprior-graph? (listof full-evaluation?) (or/c #f natural-number/c))
  (conjunction preprior full-ai-rules)
  @{Selects an abstract atom from @racket[conjunction] based on the ordering generated by @racket[preprior],
 or a fully evaluatable abstract atom based on @racket[full-ai-rules].
 If neither source provides sufficient information to make a choice, this function returns @racket[#f].}))